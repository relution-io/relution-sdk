/*
 * @file livedata/LiveDataTimestamp.ts
 * Relution SDK
 *
 * Created by Thomas Beckmann on 07.12.2015
 * Copyright 2016 M-Way Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @module livedata
 */
/** */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = require('lodash');
var Model_1 = require('./Model');
var diag = require('../core/diag');
/**
 * timestamp packed into a Model.
 *
 * @module Relution.livedata.LiveDataTimestamp
 *
 * @type {*}
 */
var LiveDataTimestampModel = (function (_super) {
    __extends(LiveDataTimestampModel, _super);
    function LiveDataTimestampModel() {
        _super.apply(this, arguments);
    }
    return LiveDataTimestampModel;
}(Model_1.Model));
exports.LiveDataTimestampModel = LiveDataTimestampModel;
// mixins
var timestampmodel = _.extend(LiveDataTimestampModel.prototype, {
    _type: 'Relution.livedata.LiveDataTimestampModel',
    entity: '__timestamp__',
    idAttribute: 'channel'
});
diag.debug.assert(function () { return LiveDataTimestampModel.prototype.isPrototypeOf(Object.create(timestampmodel)); });
diag.debug.assert(function () { return new LiveDataTimestampModel({ channel: 'check' }).id === 'check'; });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGl2ZURhdGFUaW1lc3RhbXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGl2ZWRhdGEvTGl2ZURhdGFUaW1lc3RhbXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUNIOztHQUVHO0FBQ0gsTUFBTTs7Ozs7OztBQUVOLElBQVksQ0FBQyxXQUFNLFFBQVEsQ0FBQyxDQUFBO0FBRTVCLHNCQUFvQixTQUFTLENBQUMsQ0FBQTtBQUU5QixJQUFZLElBQUksV0FBTSxjQUFjLENBQUMsQ0FBQTtBQXNCckM7Ozs7OztHQU1HO0FBQ0g7SUFBNEMsMENBQUs7SUFBakQ7UUFBNEMsOEJBQUs7SUFPakQsQ0FBQztJQUFELDZCQUFDO0FBQUQsQ0FBQyxBQVBELENBQTRDLGFBQUssR0FPaEQ7QUFQWSw4QkFBc0IseUJBT2xDLENBQUE7QUFFRCxTQUFTO0FBQ1QsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUU7SUFDOUQsS0FBSyxFQUFFLDBDQUEwQztJQUNqRCxNQUFNLEVBQUUsZUFBZTtJQUN2QixXQUFXLEVBQUUsU0FBUztDQUN2QixDQUFDLENBQUM7QUFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsc0JBQXNCLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQTdFLENBQTZFLENBQUMsQ0FBQztBQUN2RyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsSUFBSSxzQkFBc0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxPQUFPLEVBQS9ELENBQStELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBmaWxlIGxpdmVkYXRhL0xpdmVEYXRhVGltZXN0YW1wLnRzXHJcbiAqIFJlbHV0aW9uIFNES1xyXG4gKlxyXG4gKiBDcmVhdGVkIGJ5IFRob21hcyBCZWNrbWFubiBvbiAwNy4xMi4yMDE1XHJcbiAqIENvcHlyaWdodCAyMDE2IE0tV2F5IFNvbHV0aW9ucyBHbWJIXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQG1vZHVsZSBsaXZlZGF0YVxyXG4gKi9cclxuLyoqICovXHJcblxyXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XHJcblxyXG5pbXBvcnQge01vZGVsfSBmcm9tICcuL01vZGVsJztcclxuXHJcbmltcG9ydCAqIGFzIGRpYWcgZnJvbSAnLi4vY29yZS9kaWFnJztcclxuXHJcbi8qKlxyXG4gKiB1c2VkIHRvIHBlcnNpc3QgbGFzdCBtZXNzYWdlIHRpbWVzdGFtcCBkYXRhLlxyXG4gKlxyXG4gKiBAbW9kdWxlIFJlbHV0aW9uLmxpdmVkYXRhLkxpdmVEYXRhVGltZXN0YW1wXHJcbiAqXHJcbiAqIEB0eXBlIHsqfVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBMaXZlRGF0YVRpbWVzdGFtcCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIGNoYW5uZWwgdGhlIHRpbWVzdGFtcCBiZWxvbmdzIHRvLlxyXG4gICAqL1xyXG4gIGNoYW5uZWw6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogdmFsdWUgc3RvcmVkLlxyXG4gICAqL1xyXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogdGltZXN0YW1wIHBhY2tlZCBpbnRvIGEgTW9kZWwuXHJcbiAqXHJcbiAqIEBtb2R1bGUgUmVsdXRpb24ubGl2ZWRhdGEuTGl2ZURhdGFUaW1lc3RhbXBcclxuICpcclxuICogQHR5cGUgeyp9XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTGl2ZURhdGFUaW1lc3RhbXBNb2RlbCBleHRlbmRzIE1vZGVsLyo8TGl2ZURhdGFUaW1lc3RhbXA+Ki8ge1xyXG5cclxuICAvKipcclxuICAgKiByZWRlZmluZWQgdG8gY29uY3JldGUgdHlwZSBvZiBhdHRyaWJ1dGVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhdHRyaWJ1dGVzOiBMaXZlRGF0YVRpbWVzdGFtcDtcclxuXHJcbn1cclxuXHJcbi8vIG1peGluc1xyXG5sZXQgdGltZXN0YW1wbW9kZWwgPSBfLmV4dGVuZChMaXZlRGF0YVRpbWVzdGFtcE1vZGVsLnByb3RvdHlwZSwge1xyXG4gIF90eXBlOiAnUmVsdXRpb24ubGl2ZWRhdGEuTGl2ZURhdGFUaW1lc3RhbXBNb2RlbCcsXHJcbiAgZW50aXR5OiAnX190aW1lc3RhbXBfXycsXHJcbiAgaWRBdHRyaWJ1dGU6ICdjaGFubmVsJ1xyXG59KTtcclxuZGlhZy5kZWJ1Zy5hc3NlcnQoKCkgPT4gTGl2ZURhdGFUaW1lc3RhbXBNb2RlbC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihPYmplY3QuY3JlYXRlKHRpbWVzdGFtcG1vZGVsKSkpO1xyXG5kaWFnLmRlYnVnLmFzc2VydCgoKSA9PiBuZXcgTGl2ZURhdGFUaW1lc3RhbXBNb2RlbCh7IGNoYW5uZWw6ICdjaGVjaycgfSkuaWQgPT09ICdjaGVjaycpO1xyXG4iXX0=