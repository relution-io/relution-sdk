/*
 * @file livedata/LiveDataMessage.ts
 * Relution SDK
 *
 * Created by Thomas Beckmann on 07.12.2015
 * Copyright 2016 M-Way Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @module livedata
 */
/** */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = require('lodash');
var Model_1 = require('./Model');
var diag = require('../core/diag');
/**
 * message packed into a Model.
 *
 * @module Relution.livedata.LiveDataMessage
 *
 * @type {*}
 */
var LiveDataMessageModel = (function (_super) {
    __extends(LiveDataMessageModel, _super);
    function LiveDataMessageModel() {
        _super.apply(this, arguments);
    }
    return LiveDataMessageModel;
}(Model_1.Model));
exports.LiveDataMessageModel = LiveDataMessageModel;
// mixins
var msgmodel = _.extend(LiveDataMessageModel.prototype, {
    _type: 'Relution.livedata.LiveDataMessageModel',
    entity: '__msg__',
    idAttribute: '_id'
});
diag.debug.assert(function () { return LiveDataMessageModel.prototype.isPrototypeOf(Object.create(msgmodel)); });
diag.debug.assert(function () { return new LiveDataMessageModel({ _id: 'check' }).id === 'check'; });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGl2ZURhdGFNZXNzYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpdmVkYXRhL0xpdmVEYXRhTWVzc2FnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0JHO0FBQ0g7O0dBRUc7QUFDSCxNQUFNOzs7Ozs7O0FBRU4sSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFNUIsc0JBQW9CLFNBQVMsQ0FBQyxDQUFBO0FBRTlCLElBQVksSUFBSSxXQUFNLGNBQWMsQ0FBQyxDQUFBO0FBaUVyQzs7Ozs7O0dBTUc7QUFDSDtJQUEwQyx3Q0FBSztJQUEvQztRQUEwQyw4QkFBSztJQU8vQyxDQUFDO0lBQUQsMkJBQUM7QUFBRCxDQUFDLEFBUEQsQ0FBMEMsYUFBSyxHQU85QztBQVBZLDRCQUFvQix1QkFPaEMsQ0FBQTtBQUVELFNBQVM7QUFDVCxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRTtJQUN0RCxLQUFLLEVBQUUsd0NBQXdDO0lBQy9DLE1BQU0sRUFBRSxTQUFTO0lBQ2pCLFdBQVcsRUFBRSxLQUFLO0NBQ25CLENBQUMsQ0FBQztBQUNILElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBckUsQ0FBcUUsQ0FBQyxDQUFDO0FBQy9GLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxJQUFJLG9CQUFvQixDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLE9BQU8sRUFBekQsQ0FBeUQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEBmaWxlIGxpdmVkYXRhL0xpdmVEYXRhTWVzc2FnZS50c1xuICogUmVsdXRpb24gU0RLXG4gKlxuICogQ3JlYXRlZCBieSBUaG9tYXMgQmVja21hbm4gb24gMDcuMTIuMjAxNVxuICogQ29weXJpZ2h0IDIwMTYgTS1XYXkgU29sdXRpb25zIEdtYkhcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBAbW9kdWxlIGxpdmVkYXRhXG4gKi9cbi8qKiAqL1xuXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7TW9kZWx9IGZyb20gJy4vTW9kZWwnO1xuXG5pbXBvcnQgKiBhcyBkaWFnIGZyb20gJy4uL2NvcmUvZGlhZyc7XG5cbi8qKlxuICogYW4gb2ZmbGluZSBtZXNzYWdlIG9mIHRoZSBjbGllbnQgb3IgYSBjaGFuZ2UgbWVzc2FnZSBvZiB0aGUgc2VydmVyLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExpdmVEYXRhTWVzc2FnZSB7XG5cbiAgLyoqXG4gICAqIHByaW1hcnkga2V5IG9mIHRoZSBtZXNzYWdlLlxuICAgKlxuICAgKiA8cD5cbiAgICogRm9yIG9mZmxpbmUgbWVzc2FnZXMgc3RvcmVkIG9uIHRoZSBjbGllbnQtc2lkZSB0aGUga2V5IGlzIG9mIHRoZSBmb3JtIGVudGl0eX5pZC4gVGhlIGVudGl0eSBwcmVmaXhcbiAgICogaXMgcmVxdWlyZWQgaW4gb3JkZXIgdG8gY29tcG9zZSBhIHVuaXF1ZSBrZXkgaW4gdGhlIHJhcmUgZXZlbnQgb2YgdXNpbmcgdGhlIHNhbWUgaWQgdmFsdWUgaW5cbiAgICogZGlmZmVyZW50IGVudGl0aWVzLiBOb3RpY2UsIHRoZSBjb21iaW5hdGlvbiBpcyB1bmlxdWUgYmVjYXVzZSBvZmZsaW5lIG1lc3NhZ2VzIHRhcmdldGluZyB0aGUgc2FtZVxuICAgKiByZWNvcmQgYXJlIG1lcmdlZCByZXN1bHRpbmcgaW4ganVzdCBvbmUgY2hhbmdlLlxuICAgKiA8L3A+XG4gICAqIDxwPlxuICAgKiBGb3IgdHJhbnNpZW50IChub3Qgc3RvcmVkKSBvZmZsaW5lIG1lc3NhZ2VzIG9uIHRoZSBjbGllbnQtc2lkZSB0aGUgdmFsdWUgaXMgbm90IHByZXNlbnQuXG4gICAqIDwvcD5cbiAgICogPHA+XG4gICAqIEZvciBjaGFuZ2VzIHJlcG9ydGVkIGJ5IHRoZSBzZXJ2ZXItc2lkZSBhbiBleHBsaWNpdCBfaWQgdmFsdWUgaXMgdXNlZCwgd2hpY2ggaXMgb2Ygbm8gY29uY2VybiB0b1xuICAgKiB0aGUgY2xpZW50IGV4Y2VwdCBmb3IgZGlhZ25vc3RpY3MgYXMgYSBkZWJ1Z2dpbmcgYWlkLlxuICAgKiA8L3A+XG4gICAqL1xuICBfaWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIG9yaWdpbmFsIGtleSBvZiB0aGUgdGFyZ2V0IHJlY29yZCBiZWluZyBhbHRlcmVkLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQ1JVRC1tZXRob2Qgb2YgaG93IHRoZSByZWNvcmQgaXMgYWx0ZXJlZC5cbiAgICpcbiAgICogPHA+XG4gICAqIFRoaXMgY2FuIGJlIG9uZSBvZiByZWFkLCBjcmVhdGUsIHVwZGF0ZSwgcGF0Y2ggb3IgZGVsZXRlIG9ubHkuXG4gICAqIDwvcD5cbiAgICovXG4gIG1ldGhvZDogc3RyaW5nO1xuICAvKipcbiAgICogcG9pbnQgaW4gdGltZSBvZiBhbHRlcmF0aW9uLlxuICAgKi9cbiAgdGltZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBhY3R1YWwgYXR0cmlidXRlIGRhdGEgYmVpbmcgc2V0IChwYXRjaCA9PiBtZXJnZWQpIG9uIHRhcmdldCBtb2RlbCBpbiBmb3JtYXQgc3VpdGFibGUgZm9yIG1vZGVsLnNldCgpIGNhbGwuXG4gICAqL1xuICBkYXRhOiBhbnk7XG5cbiAgLyoqXG4gICAqIG9mZmxpbmUgbWVzc2FnZXMgYXJlIHJlcGxheWVkIGluIHNvcnQgb3JkZXIgb2YgaW5jcmVhc2luZyBwcmlvcml0eSBmb2xsb3dlZCBieSBpbmNyZWFzaW5nIHRpbWUuXG4gICAqXG4gICAqIDxwPlxuICAgKiBUaGUgcHJpb3JpdHkgYXNzaWduZWQgaXMgYmFzZWQgb24gdGhlIFN5bmNFbmRwb2ludCAoYWthLiBlbnRpdHkpLiBCeSBkZWZhdWx0LCBhbGwgZW50aXRlcyBhcmUgb2YgZXF1YWwgcHJpb3JpdHlcbiAgICogc28gdGhhdCBtZXNzYWdlcyBhcmUgcmVwbGF5ZWQgaW4gY2F1c2FsIG9yZGVyLiBUaGUgcHJpb3JpdHkgbWF5IGJlIGNoYW5nZWQgdG8gYWNjb3VudCBmb3IgZm9yZWlnbiBrZXkgaWRcbiAgICogcmVmZXJlbmNlcyBhbW9uZyB0aGUgZW50aXRpZXMuIFdoZW4gdGhpcyBpcyBkb25lLCBlbnRpdGllcyB3aXRoIGxvd2VyIHByaW9yaXR5IHZhbHVlcyBhcmUgcHJvcGFnYXRlZCB0byB0aGVcbiAgICogc2VydmVyIGJlZm9yZSBtZXNzYWdlcyBvZiBoaWdoZXIgb3JkZXIsIGluZGVwZW5kZW50IG9mIHRoZWlyIHRpbWVseSBvcmRlci5cbiAgICogPC9wPlxuICAgKiA8cD5cbiAgICogQW4gZXhhbXBsZSBhcmUgY3VzdG9tZXIgYWNjb3VudHMgd2hpY2ggbXVzdCBiZSBjcmVhdGVkIGJlZm9yZSBjcmVhdGlvbiBvZiBzaG9wcGluZyBjYXJkIG9yZGVycy5cbiAgICogPC9wPlxuICAgKi9cbiAgcHJpb3JpdHk/OiBudW1iZXI7XG59XG5cbi8qKlxuICogbWVzc2FnZSBwYWNrZWQgaW50byBhIE1vZGVsLlxuICpcbiAqIEBtb2R1bGUgUmVsdXRpb24ubGl2ZWRhdGEuTGl2ZURhdGFNZXNzYWdlXG4gKlxuICogQHR5cGUgeyp9XG4gKi9cbmV4cG9ydCBjbGFzcyBMaXZlRGF0YU1lc3NhZ2VNb2RlbCBleHRlbmRzIE1vZGVsLyo8TGl2ZURhdGFNZXNzYWdlPiovIHtcblxuICAvKipcbiAgICogcmVkZWZpbmVkIHRvIGNvbmNyZXRlIHR5cGUgb2YgYXR0cmlidXRlcy5cbiAgICovXG4gIHB1YmxpYyBhdHRyaWJ1dGVzOiBMaXZlRGF0YU1lc3NhZ2U7XG5cbn1cblxuLy8gbWl4aW5zXG5sZXQgbXNnbW9kZWwgPSBfLmV4dGVuZChMaXZlRGF0YU1lc3NhZ2VNb2RlbC5wcm90b3R5cGUsIHtcbiAgX3R5cGU6ICdSZWx1dGlvbi5saXZlZGF0YS5MaXZlRGF0YU1lc3NhZ2VNb2RlbCcsXG4gIGVudGl0eTogJ19fbXNnX18nLFxuICBpZEF0dHJpYnV0ZTogJ19pZCdcbn0pO1xuZGlhZy5kZWJ1Zy5hc3NlcnQoKCkgPT4gTGl2ZURhdGFNZXNzYWdlTW9kZWwucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoT2JqZWN0LmNyZWF0ZShtc2dtb2RlbCkpKTtcbmRpYWcuZGVidWcuYXNzZXJ0KCgpID0+IG5ldyBMaXZlRGF0YU1lc3NhZ2VNb2RlbCh7IF9pZDogJ2NoZWNrJyB9KS5pZCA9PT0gJ2NoZWNrJyk7XG4iXX0=