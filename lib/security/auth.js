/*
 * @file security/Authorization.ts
 * Relution SDK
 *
 * Created by Thomas Beckmann on 28.04.2016
 * Copyright 2016 M-Way Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @module security
 */
/** */
"use strict";
function cloneCredentials(credentials) {
    return JSON.parse(JSON.stringify(credentials));
}
exports.cloneCredentials = cloneCredentials;
function freezeCredentials(credentials) {
    return Object.freeze(credentials);
}
exports.freezeCredentials = freezeCredentials;
/**
 * turns the object deeply immutable.
 *
 * @param authorization to freeze.
 * @return {Authorization} authorization for convenience.
 *
 * @internal for library use only.
 */
function freezeAuthorization(authorization) {
    authorization.roles = Object.freeze(authorization.roles);
    return Object.freeze(authorization);
}
exports.freezeAuthorization = freezeAuthorization;
/**
 * Virtual role for all authenticated users.
 */
exports.ROLE_AUTHENTICATED = 'user.authenticated';
/**
 * Administrator's role name. Users in this role should have full access to
 * all services in the system.
 */
exports.ROLE_ADMIN = 'ADMIN';
/**
 * The name of the predefined role, user.anyone, that all users and groups
 * belong to.
 */
exports.USER_ANYONE = 'user.anyone';
/**
 * immutable [[Authorization]] representing the anonymous user.
 *
 * @type {Authorization}
 */
exports.ANONYMOUS_AUTHORIZATION = freezeAuthorization({
    name: void 0,
    roles: [
        exports.USER_ANYONE
    ]
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZWN1cml0eS9hdXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkc7QUFDSDs7R0FFRztBQUNILE1BQU07O0FBc0JOLDBCQUFtRSxXQUF5QjtJQUUxRixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUhlLHdCQUFnQixtQkFHL0IsQ0FBQTtBQUNELDJCQUFvRSxXQUF5QjtJQUUzRixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBSGUseUJBQWlCLG9CQUdoQyxDQUFBO0FBa0JEOzs7Ozs7O0dBT0c7QUFDSCw2QkFBb0MsYUFBNEI7SUFDOUQsYUFBYSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6RCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBSGUsMkJBQW1CLHNCQUdsQyxDQUFBO0FBRUQ7O0dBRUc7QUFDVSwwQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQztBQUN2RDs7O0dBR0c7QUFDVSxrQkFBVSxHQUFHLE9BQU8sQ0FBQztBQUNsQzs7O0dBR0c7QUFDVSxtQkFBVyxHQUFHLGFBQWEsQ0FBQztBQUN6Qzs7OztHQUlHO0FBQ1UsK0JBQXVCLEdBQUcsbUJBQW1CLENBQUM7SUFDekQsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUNaLEtBQUssRUFBRTtRQUNMLG1CQUFXO0tBQ1o7Q0FDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQGZpbGUgc2VjdXJpdHkvQXV0aG9yaXphdGlvbi50c1xuICogUmVsdXRpb24gU0RLXG4gKlxuICogQ3JlYXRlZCBieSBUaG9tYXMgQmVja21hbm4gb24gMjguMDQuMjAxNlxuICogQ29weXJpZ2h0IDIwMTYgTS1XYXkgU29sdXRpb25zIEdtYkhcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBAbW9kdWxlIHNlY3VyaXR5XG4gKi9cbi8qKiAqL1xuXG4vKipcbiAqIHNvbWUgSlNPTiBsaXRlcmFsIG9mIGtleS92YWx1ZSBwYWlycyByZXByZXNlbnRpbmcgY3JlZGVudGlhbHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlZGVudGlhbHMge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIFtpbmRleDogbnVtYmVyXTogYW55O1xufVxuLyoqXG4gKiB2ZXJzaW9uIG9mIFtbQ3JlZGVudGlhbHNdXSB1c2VkIGJ5IFJlbHV0aW9uIHNlcnZlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMb2dpbk9iamVjdCBleHRlbmRzIENyZWRlbnRpYWxzIHtcbiAgdXNlck5hbWU/OiBzdHJpbmc7XG4gIG9yZ2FOYW1lPzogc3RyaW5nO1xuICBwYXNzd29yZD86IHN0cmluZztcbiAgLyoqXG4gICAqIHVzZWQgb25seSBpZiBbW3VzZXJOYW1lXV0gaXMgbm90IHNldC5cbiAgICovXG4gIGVtYWlsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVDcmVkZW50aWFsczxDcmVkZW50aWFsc1QgZXh0ZW5kcyBDcmVkZW50aWFscz4oY3JlZGVudGlhbHM6IENyZWRlbnRpYWxzVCk6XG4gICAgQ3JlZGVudGlhbHNUIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY3JlZGVudGlhbHMpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcmVlemVDcmVkZW50aWFsczxDcmVkZW50aWFsc1QgZXh0ZW5kcyBDcmVkZW50aWFscz4oY3JlZGVudGlhbHM6IENyZWRlbnRpYWxzVCk6XG4gICAgQ3JlZGVudGlhbHNUIHtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUoY3JlZGVudGlhbHMpO1xufVxuXG4vKipcbiAqIHByb3ZpZGVzIGFjY2VzcyBjb250cm9sIHJlbGF0ZWQgaW5mb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aG9yaXphdGlvbiB7XG4gIC8qKlxuICAgKiB0aGUgKlVVSUQqIG9mIHRoZSB1c2VyIHJlcHJlc2VudGVkLlxuICAgKlxuICAgKiBOb3RpY2UsIG9ubHkgdGhlIFtbQU5PTllNT1VTX0FVVEhPUklaQVRJT05dXSBkb2VzIG5vdCBzcGVjaWZ5IGEgbmFtZS5cbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBzZWN1cml0eSByb2xlcyB0aGUgdXNlciBiZWxvbmdzIHRvLCBuZXZlciBudWxsLlxuICAgKi9cbiAgcm9sZXM6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIHR1cm5zIHRoZSBvYmplY3QgZGVlcGx5IGltbXV0YWJsZS5cbiAqXG4gKiBAcGFyYW0gYXV0aG9yaXphdGlvbiB0byBmcmVlemUuXG4gKiBAcmV0dXJuIHtBdXRob3JpemF0aW9ufSBhdXRob3JpemF0aW9uIGZvciBjb252ZW5pZW5jZS5cbiAqXG4gKiBAaW50ZXJuYWwgZm9yIGxpYnJhcnkgdXNlIG9ubHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcmVlemVBdXRob3JpemF0aW9uKGF1dGhvcml6YXRpb246IEF1dGhvcml6YXRpb24pOiBBdXRob3JpemF0aW9uIHtcbiAgYXV0aG9yaXphdGlvbi5yb2xlcyA9IE9iamVjdC5mcmVlemUoYXV0aG9yaXphdGlvbi5yb2xlcyk7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKGF1dGhvcml6YXRpb24pO1xufVxuXG4vKipcbiAqIFZpcnR1YWwgcm9sZSBmb3IgYWxsIGF1dGhlbnRpY2F0ZWQgdXNlcnMuXG4gKi9cbmV4cG9ydCBjb25zdCBST0xFX0FVVEhFTlRJQ0FURUQgPSAndXNlci5hdXRoZW50aWNhdGVkJztcbi8qKlxuICogQWRtaW5pc3RyYXRvcidzIHJvbGUgbmFtZS4gVXNlcnMgaW4gdGhpcyByb2xlIHNob3VsZCBoYXZlIGZ1bGwgYWNjZXNzIHRvXG4gKiBhbGwgc2VydmljZXMgaW4gdGhlIHN5c3RlbS5cbiAqL1xuZXhwb3J0IGNvbnN0IFJPTEVfQURNSU4gPSAnQURNSU4nO1xuLyoqXG4gKiBUaGUgbmFtZSBvZiB0aGUgcHJlZGVmaW5lZCByb2xlLCB1c2VyLmFueW9uZSwgdGhhdCBhbGwgdXNlcnMgYW5kIGdyb3Vwc1xuICogYmVsb25nIHRvLlxuICovXG5leHBvcnQgY29uc3QgVVNFUl9BTllPTkVcdD0gJ3VzZXIuYW55b25lJztcbi8qKlxuICogaW1tdXRhYmxlIFtbQXV0aG9yaXphdGlvbl1dIHJlcHJlc2VudGluZyB0aGUgYW5vbnltb3VzIHVzZXIuXG4gKlxuICogQHR5cGUge0F1dGhvcml6YXRpb259XG4gKi9cbmV4cG9ydCBjb25zdCBBTk9OWU1PVVNfQVVUSE9SSVpBVElPTiA9IGZyZWV6ZUF1dGhvcml6YXRpb24oe1xuICBuYW1lOiB2b2lkIDAsXG4gIHJvbGVzOiBbXG4gICAgVVNFUl9BTllPTkVcbiAgXVxufSk7XG4iXX0=