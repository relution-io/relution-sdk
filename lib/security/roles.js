/*
 * @file security/roles.ts
 * Relution SDK
 *
 * Created by Thomas Beckmann on 28.04.2016
 * Copyright 2016 M-Way Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @module security
 */
/** */
"use strict";
var domain = require('../core/domain');
/**
 * turns the object deeply immutable.
 *
 * @param organization to freeze.
 * @return {Organization} organization for convenience.
 *
 * @internal for library use only.
 */
function freezeOrganization(organization) {
    if (organization.propertyMap) {
        organization.propertyMap = Object.freeze(organization.propertyMap);
    }
    return domain.freeze(organization);
}
exports.freezeOrganization = freezeOrganization;
/**
 * turns the object deeply immutable.
 *
 * @param user to freeze.
 * @return {User} user for convenience.
 *
 * @internal for library use only.
 */
function freezeUser(user) {
    if (user.lastLoggedTime) {
        user.lastLoggedTime = Object.freeze(new Date(+user.lastLoggedTime));
    }
    if (user.passwordExpires) {
        user.passwordExpires = Object.freeze(new Date(+user.passwordExpires));
    }
    if (user.confirmationTokenValidTo) {
        user.confirmationTokenValidTo = Object.freeze(new Date(+user.confirmationTokenValidTo));
    }
    if (user.preferences) {
        user.preferences = Object.freeze(user.preferences);
    }
    return domain.freeze(user);
}
exports.freezeUser = freezeUser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VjdXJpdHkvcm9sZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUNIOztHQUVHO0FBQ0gsTUFBTTs7QUFFTixJQUFZLE1BQU0sV0FBTSxnQkFBZ0IsQ0FBQyxDQUFBO0FBNkV6Qzs7Ozs7OztHQU9HO0FBQ0gsNEJBQW1DLFlBQTBCO0lBQzNELEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQzdCLFlBQVksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFMZSwwQkFBa0IscUJBS2pDLENBQUE7QUE0QkQ7Ozs7Ozs7R0FPRztBQUNILG9CQUEyQixJQUFVO0lBQ25DLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFkZSxrQkFBVSxhQWN6QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEBmaWxlIHNlY3VyaXR5L3JvbGVzLnRzXG4gKiBSZWx1dGlvbiBTREtcbiAqXG4gKiBDcmVhdGVkIGJ5IFRob21hcyBCZWNrbWFubiBvbiAyOC4wNC4yMDE2XG4gKiBDb3B5cmlnaHQgMjAxNiBNLVdheSBTb2x1dGlvbnMgR21iSFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEBtb2R1bGUgc2VjdXJpdHlcbiAqL1xuLyoqICovXG5cbmltcG9ydCAqIGFzIGRvbWFpbiBmcm9tICcuLi9jb3JlL2RvbWFpbic7XG5cbi8qKlxuICogUm9sZSBpcyBlaXRoZXIgYSBVc2VyIG9yIGEgR3JvdXAuXG4gKi9cbmV4cG9ydCB0eXBlIFJvbGVUeXBlID1cbiAgJ0dST1VQJyB8XG4gICdVU0VSJztcbi8qKlxuICogQSBHcm91cCBjYW4gaGF2ZSBvbmUgb2YgdGhlc2UgdHlwZXMuXG4gKi9cbmV4cG9ydCB0eXBlIEdyb3VwVHlwZSA9XG4gIC8qKlxuICAgKiBjcmVhdGVkIGJ5IHRoZSBzeXN0ZW0uXG4gICAqXG4gICAqIFJlcHJlc2VudHMgbG93LWxldmVsIHBlcm1pc3Npb24gdXNlZCB0byBncmFudC9kZW55IGFjY2VzcyB0byBzeXN0ZW0tZnVuY3Rpb25hbGl0eSBhbmQgZW50aXRpZXMuXG4gICAqL1xuICAnU1lTVEVNX1BFUk1JU1NJT04nIHxcbiAgLyoqXG4gICAqIENhbiBoYXZlIFVzZXIgYW5kIEdyb3VwIGVudGl0aWVzIGFzIG1lbWJlcnMuXG4gICAqL1xuICAnR1JPVVAnIHxcbiAgLyoqXG4gICAqIExpa2UgYSBHUk9VUCwgYnV0IGlzIGNyZWF0ZWQgYnkgdGhlIHN5c3RlbSBhbmQgY2FuJ3QgYmUgcmVuYW1lZCBvciBtb3ZlZCB0byBhbm90aGVyXG4gICAqIE9yZ2FuaXphdGlvbi5cbiAgICovXG4gICdTWVNURU1fR1JPVVAnO1xuLyoqXG4gKiBMaWdodHdlaWdodCBEVE8gZm9yIHNlbmRpbmcgbWVtYmVycyBhbmQgcm9sZXMgb2YgZ3JvdXBzL3VzZXJzIGluIEpTT04gcmVzcG9uc2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJvbGVEdG8ge1xuICAvLyBjb20ubXdheXNvbHV0aW9ucy5nb2ZlcjIuc2VjdXJpdHkuZG9tYWluLlJvbGVEdG9cbiAgdXVpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgc3lzdGVtUGVybWlzc2lvbjogYm9vbGVhbjtcblxuICB0eXBlOiBSb2xlVHlwZTtcbiAgZ3JvdXBUeXBlPzogR3JvdXBUeXBlO1xufVxuXG4vKipcbiAqIHJvbGUgZGF0YSBhcyBleGNoYW5nZWQgd2l0aCBSZWx1dGlvbiBzZXJ2ZXIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm9sZSBleHRlbmRzIGRvbWFpbi5SZWZlcmVuY2VhYmxlLCBkb21haW4uU2VjdXJlLCBkb21haW4uSGFzVmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbWFpbi5IYXNCdW5kbGUge1xuICB0eXBlOiBSb2xlVHlwZTtcbiAgcm9sZXM6IHN0cmluZ1tdO1xuICByb2xlc09iamVjdHM6IFJvbGVEdG9bXTtcbiAgc3lzUm9sZXM6IHN0cmluZ1tdO1xuICBwcm92aWRlcj86IHN0cmluZztcbiAgZm9yZWlnbktleT86IHN0cmluZztcblxuICAvLyBkZXByZWNhdGVkOiBhIFJvbGUgaXMgcmVhZG9ubHkgaWYgYW5kIG9ubHkgaWYgaXQgaGFzIGEgcHJvdmlkZXJcbiAgcmVhZG9ubHk/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIHRlbmFuY3kgb3JnYW5pemF0aW9uIGRhdGEgYXMgZXhjaGFuZ2VkIHdpdGggUmVsdXRpb24gc2VydmVyLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9yZ2FuaXphdGlvbiBleHRlbmRzIGRvbWFpbi5SZWZlcmVuY2VhYmxlLCBkb21haW4uU2VjdXJlLCBkb21haW4uSGFzVmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWluLkhhc0J1bmRsZSwgZG9tYWluLkhhc01vZGlmaWVkIHtcbiAgbmFtZTogc3RyaW5nO1xuICB1bmlxdWVOYW1lOiBzdHJpbmc7XG5cbiAgYWRkcmVzcz86IGFueTtcbiAgYmlsbGluZ1NldHRpbmdzPzogYW55O1xuICBwYXNzd29yZFBvbGljeT86IGFueTtcbiAgdGVjaG5pY2FsUGVyc29uPzogYW55O1xuICB1cmw/OiBzdHJpbmc7XG4gIGFzc2V0UGF0aD86IHN0cmluZztcbiAgcmVwb3J0TG9jYWxlU3RyaW5nPzogc3RyaW5nO1xuXG4gIGRlZmF1bHRSb2xlcz86IHN0cmluZ1tdO1xuICBwcm9wZXJ0eU1hcD86IGFueTtcbn1cblxuLyoqXG4gKiB0dXJucyB0aGUgb2JqZWN0IGRlZXBseSBpbW11dGFibGUuXG4gKlxuICogQHBhcmFtIG9yZ2FuaXphdGlvbiB0byBmcmVlemUuXG4gKiBAcmV0dXJuIHtPcmdhbml6YXRpb259IG9yZ2FuaXphdGlvbiBmb3IgY29udmVuaWVuY2UuXG4gKlxuICogQGludGVybmFsIGZvciBsaWJyYXJ5IHVzZSBvbmx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJlZXplT3JnYW5pemF0aW9uKG9yZ2FuaXphdGlvbjogT3JnYW5pemF0aW9uKTogT3JnYW5pemF0aW9uIHtcbiAgaWYgKG9yZ2FuaXphdGlvbi5wcm9wZXJ0eU1hcCkge1xuICAgIG9yZ2FuaXphdGlvbi5wcm9wZXJ0eU1hcCA9IE9iamVjdC5mcmVlemUob3JnYW5pemF0aW9uLnByb3BlcnR5TWFwKTtcbiAgfVxuICByZXR1cm4gZG9tYWluLmZyZWV6ZShvcmdhbml6YXRpb24pO1xufVxuXG5cbi8qKlxuICogdXNlciBkYXRhIGFzIGV4Y2hhbmdlZCB3aXRoIFJlbHV0aW9uIHNlcnZlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VyIGV4dGVuZHMgUm9sZSB7XG4gIG9yZ2FuaXphdGlvblV1aWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBwYXNzd29yZD86IHN0cmluZztcblxuICBzYWx1dGF0aW9uPzogc3RyaW5nO1xuICBnaXZlbk5hbWU/OiBzdHJpbmc7XG4gIHN1cm5hbWU/OiBzdHJpbmc7XG4gIHBvc2l0aW9uPzogc3RyaW5nO1xuICBlbWFpbD86IHN0cmluZztcbiAgcGhvbmU/OiBzdHJpbmc7XG4gIGNvdW50cnk/OiBzdHJpbmc7XG4gIGxhc3RMb2dnZWRUaW1lPzogRGF0ZSB8IG51bWJlcjtcbiAgcGFzc3dvcmRFeHBpcmVzPzogRGF0ZSB8IG51bWJlcjtcbiAgbG9ja2VkPzogYm9vbGVhbjtcbiAgYWN0aXZhdGVkPzogYm9vbGVhbjtcbiAgY29uZmlybWF0aW9uVG9rZW4/OiBzdHJpbmc7XG4gIGNvbmZpcm1hdGlvblRva2VuVmFsaWRUbz86IERhdGU7XG5cbiAgcHJlZmVyZW5jZXM/OiBhbnk7XG59XG5cbi8qKlxuICogdHVybnMgdGhlIG9iamVjdCBkZWVwbHkgaW1tdXRhYmxlLlxuICpcbiAqIEBwYXJhbSB1c2VyIHRvIGZyZWV6ZS5cbiAqIEByZXR1cm4ge1VzZXJ9IHVzZXIgZm9yIGNvbnZlbmllbmNlLlxuICpcbiAqIEBpbnRlcm5hbCBmb3IgbGlicmFyeSB1c2Ugb25seS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyZWV6ZVVzZXIodXNlcjogVXNlcik6IFVzZXIge1xuICBpZiAodXNlci5sYXN0TG9nZ2VkVGltZSkge1xuICAgIHVzZXIubGFzdExvZ2dlZFRpbWUgPSBPYmplY3QuZnJlZXplKG5ldyBEYXRlKCt1c2VyLmxhc3RMb2dnZWRUaW1lKSk7XG4gIH1cbiAgaWYgKHVzZXIucGFzc3dvcmRFeHBpcmVzKSB7XG4gICAgdXNlci5wYXNzd29yZEV4cGlyZXMgPSBPYmplY3QuZnJlZXplKG5ldyBEYXRlKCt1c2VyLnBhc3N3b3JkRXhwaXJlcykpO1xuICB9XG4gIGlmICh1c2VyLmNvbmZpcm1hdGlvblRva2VuVmFsaWRUbykge1xuICAgIHVzZXIuY29uZmlybWF0aW9uVG9rZW5WYWxpZFRvID0gT2JqZWN0LmZyZWV6ZShuZXcgRGF0ZSgrdXNlci5jb25maXJtYXRpb25Ub2tlblZhbGlkVG8pKTtcbiAgfVxuICBpZiAodXNlci5wcmVmZXJlbmNlcykge1xuICAgIHVzZXIucHJlZmVyZW5jZXMgPSBPYmplY3QuZnJlZXplKHVzZXIucHJlZmVyZW5jZXMpO1xuICB9XG4gIHJldHVybiBkb21haW4uZnJlZXplKHVzZXIpO1xufVxuIl19