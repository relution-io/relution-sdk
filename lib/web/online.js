/*
 * @file web/online.ts
 * Relution SDK
 *
 * Created by Thomas Beckmann on 14.10.2016
 * Copyright 2016 M-Way Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @module web
 */
/** */
"use strict";
var init = require('../core/init');
var server = require('../security/server');
/**
 * turns the object deeply immutable.
 *
 * @param serverInfos to freeze.
 * @return {ServerInformation} serverInfos for convenience.
 *
 * @internal for library use only.
 */
function freezeServerInformation(serverInfos) {
    return Object.freeze(serverInfos);
}
exports.freezeServerInformation = freezeServerInformation;
/**
 * gets the [[ServerInformation]] of the last recent [[ajax]] request.
 *
 * @param serverUrlOrServerUrlOptions url of server or options object, omit to query the current server.
 * @return information object when online, or falsy when offline.
 */
function getOnlineStatus(serverUrlOrServerUrlOptions) {
    if (serverUrlOrServerUrlOptions === void 0) { serverUrlOrServerUrlOptions = init.initOptions.serverUrl; }
    var serverUrl;
    if (_.isString(serverUrlOrServerUrlOptions)) {
        serverUrl = serverUrlOrServerUrlOptions;
    }
    else if (serverUrlOrServerUrlOptions) {
        serverUrl = serverUrlOrServerUrlOptions.serverUrl;
    }
    return server.Server.getInstance(serverUrl).serverInfos;
}
exports.getOnlineStatus = getOnlineStatus;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25saW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3dlYi9vbmxpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUNIOztHQUVHO0FBQ0gsTUFBTTs7QUFFTixJQUFZLElBQUksV0FBTSxjQUFjLENBQUMsQ0FBQTtBQUNyQyxJQUFZLE1BQU0sV0FBTSxvQkFBb0IsQ0FBQyxDQUFBO0FBb0I3Qzs7Ozs7OztHQU9HO0FBQ0gsaUNBQXdDLFdBQThCO0lBQ3BFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFGZSwrQkFBdUIsMEJBRXRDLENBQUE7QUFFRDs7Ozs7R0FLRztBQUNILHlCQUFnQywyQkFBd0Y7SUFBeEYsMkNBQXdGLEdBQXhGLDhCQUE4RCxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVM7SUFDdEgsSUFBSSxTQUFpQixDQUFDO0lBQ3RCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsU0FBUyxHQUFHLDJCQUEyQixDQUFDO0lBQzFDLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLFNBQVMsR0FBRywyQkFBMkIsQ0FBQyxTQUFTLENBQUM7SUFDcEQsQ0FBQztJQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDMUQsQ0FBQztBQVJlLHVCQUFlLGtCQVE5QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEBmaWxlIHdlYi9vbmxpbmUudHNcbiAqIFJlbHV0aW9uIFNES1xuICpcbiAqIENyZWF0ZWQgYnkgVGhvbWFzIEJlY2ttYW5uIG9uIDE0LjEwLjIwMTZcbiAqIENvcHlyaWdodCAyMDE2IE0tV2F5IFNvbHV0aW9ucyBHbWJIXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQG1vZHVsZSB3ZWJcbiAqL1xuLyoqICovXG5cbmltcG9ydCAqIGFzIGluaXQgZnJvbSAnLi4vY29yZS9pbml0JztcbmltcG9ydCAqIGFzIHNlcnZlciBmcm9tICcuLi9zZWN1cml0eS9zZXJ2ZXInO1xuXG4vKipcbiAqIHZlcnNpb24gaW5mb3JtYXRpb24gb2YgUmVsdXRpb24gc2VydmVyIGV4dHJhY3RlZCBmcm9tIHJlc3BvbnNlIGhlYWRlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXJ2ZXJJbmZvcm1hdGlvbiB7XG4gIC8qKlxuICAgKiBwbGFpbiB2ZXJzaW9uIG51bWJlciBvZiBSZWx1dGlvbiBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIHZhbHVlIG9mIHRoZSBYLVJlbHV0aW9uLVZlcnNpb24gaGVhZGVyOiBgMy41NmAsIGZvciBleGFtcGxlLlxuICAgKi9cbiAgdmVyc2lvbj86IHN0cmluZztcbiAgLyoqXG4gICAqIGh1bWFuIHJlYWRhYmxlIGZ1bGwgbmFtZSBvZiBSZWx1dGlvbiBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIHZhbHVlIG9mIHRoZSBYLVNlcnZlciBoZWFkZXI6IGBSZWx1dGlvbi8zLjU2IEVudGVycHJpc2UgKFdlZCBTZXAgMjggMTE6MTY6MDAgQ0VTVCAyMDE2KWAsIGZvciBleGFtcGxlLlxuICAgKi9cbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogdHVybnMgdGhlIG9iamVjdCBkZWVwbHkgaW1tdXRhYmxlLlxuICpcbiAqIEBwYXJhbSBzZXJ2ZXJJbmZvcyB0byBmcmVlemUuXG4gKiBAcmV0dXJuIHtTZXJ2ZXJJbmZvcm1hdGlvbn0gc2VydmVySW5mb3MgZm9yIGNvbnZlbmllbmNlLlxuICpcbiAqIEBpbnRlcm5hbCBmb3IgbGlicmFyeSB1c2Ugb25seS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyZWV6ZVNlcnZlckluZm9ybWF0aW9uKHNlcnZlckluZm9zOiBTZXJ2ZXJJbmZvcm1hdGlvbik6IFNlcnZlckluZm9ybWF0aW9uIHtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUoc2VydmVySW5mb3MpO1xufVxuXG4vKipcbiAqIGdldHMgdGhlIFtbU2VydmVySW5mb3JtYXRpb25dXSBvZiB0aGUgbGFzdCByZWNlbnQgW1thamF4XV0gcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0gc2VydmVyVXJsT3JTZXJ2ZXJVcmxPcHRpb25zIHVybCBvZiBzZXJ2ZXIgb3Igb3B0aW9ucyBvYmplY3QsIG9taXQgdG8gcXVlcnkgdGhlIGN1cnJlbnQgc2VydmVyLlxuICogQHJldHVybiBpbmZvcm1hdGlvbiBvYmplY3Qgd2hlbiBvbmxpbmUsIG9yIGZhbHN5IHdoZW4gb2ZmbGluZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9ubGluZVN0YXR1cyhzZXJ2ZXJVcmxPclNlcnZlclVybE9wdGlvbnM6IHN0cmluZyB8IGluaXQuU2VydmVyVXJsT3B0aW9ucyA9IGluaXQuaW5pdE9wdGlvbnMuc2VydmVyVXJsKTogU2VydmVySW5mb3JtYXRpb24ge1xuICBsZXQgc2VydmVyVXJsOiBzdHJpbmc7XG4gIGlmIChfLmlzU3RyaW5nKHNlcnZlclVybE9yU2VydmVyVXJsT3B0aW9ucykpIHtcbiAgICBzZXJ2ZXJVcmwgPSBzZXJ2ZXJVcmxPclNlcnZlclVybE9wdGlvbnM7XG4gIH0gZWxzZSBpZiAoc2VydmVyVXJsT3JTZXJ2ZXJVcmxPcHRpb25zKSB7XG4gICAgc2VydmVyVXJsID0gc2VydmVyVXJsT3JTZXJ2ZXJVcmxPcHRpb25zLnNlcnZlclVybDtcbiAgfVxuICByZXR1cm4gc2VydmVyLlNlcnZlci5nZXRJbnN0YW5jZShzZXJ2ZXJVcmwpLnNlcnZlckluZm9zO1xufVxuIl19