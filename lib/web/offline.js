/*
 * @file web/offline.ts
 * Relution SDK
 *
 * Created by Thomas Beckmann on 30.06.2016
 * Copyright 2016 M-Way Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @module web
 */
/** */
"use strict";
var Q = require('q');
var cipher = require('../core/cipher');
/**
 * localStorage of browser or via require node-localstorage.
 *
 * @internal Not public API, exported for testing purposes only!
 */
function localStorage() {
    return global['localStorage'] ||
        process && !process['browser'] && (global['localStorage'] =
            new (require('node-localstorage').LocalStorage)('localStorage')); // required version
}
exports.localStorage = localStorage;
/**
 * computes key of login response data for some server.
 *
 * @param serverOptions providing server URL so that keys do not collide.
 * @return {string} key suitable for local storage.
 */
function computeLocalStorageKey(serverOptions) {
    var uniqueModuleName = module.filename || __filename;
    return uniqueModuleName + '-' + serverOptions.serverUrl;
}
/**
 * deletes stored login response of some server.
 *
 * @param credentials allowing to differentiate when multiple logins are used simultaneously, may
 *  be null to forget just anything.
 * @param serverOptions identifying the server.
 * @return {Promise<void>} indicating success or failure.
 *
 * @internal Not part of public API, for library use only.
 */
function clearOfflineLogin(credentials, serverOptions) {
    // simultaneous logins using different credentials is not realized so far,
    // so that the credentials parameter is irrelevant, but provided for the
    // sake of completeness...
    try {
        localStorage().removeItem(computeLocalStorageKey(serverOptions));
        return Q.resolve(undefined);
    }
    catch (error) {
        return Q.reject(error);
    }
}
exports.clearOfflineLogin = clearOfflineLogin;
/**
 * writes response data to persistent storage for offline login purposes.
 *
 * @param credentials required for encryption.
 * @param serverOptions identifying the server.
 * @param loginResponse permitted to durable storage.
 * @return {Promise<http.LoginResponse>} indicating success or failure.
 *
 * @internal Not part of public API, for library use only.
 */
function storeOfflineLogin(credentials, serverOptions, loginResponse) {
    return cipher.encryptJson(credentials['password'], loginResponse).then(function (value) {
        localStorage().setItem(computeLocalStorageKey(serverOptions), JSON.stringify(value));
        return loginResponse;
    });
}
exports.storeOfflineLogin = storeOfflineLogin;
/**
 * reads response data from persistent storage.
 *
 * When there is no data in persitent store, the operation does NOT fail. In this case the
 * resulting promise resolves to nil instead.
 *
 * @param credentials required for decryption.
 * @param serverOptions identifying the server.
 * @return {Promise<http.LoginResponse>} read from store, resolves to nil when there is no data,
 *  gets rejected when decryption fails.
 *
 * @internal Not part of public API, for library use only.
 */
function fetchOfflineLogin(credentials, serverOptions) {
    try {
        var value = localStorage().getItem(computeLocalStorageKey(serverOptions));
        if (!value) {
            return Q.resolve(undefined);
        }
        return cipher.decryptJson(credentials['password'], JSON.parse(value));
    }
    catch (error) {
        return Q.reject(error);
    }
}
exports.fetchOfflineLogin = fetchOfflineLogin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2ZmbGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWIvb2ZmbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0JHO0FBQ0g7O0dBRUc7QUFDSCxNQUFNOztBQUVOLElBQVksQ0FBQyxXQUFNLEdBQUcsQ0FBQyxDQUFBO0FBR3ZCLElBQVksTUFBTSxXQUFNLGdCQUFnQixDQUFDLENBQUE7QUFJekM7Ozs7R0FJRztBQUNIO0lBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDM0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztZQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtBQUMzRixDQUFDO0FBSmUsb0JBQVksZUFJM0IsQ0FBQTtBQUVEOzs7OztHQUtHO0FBQ0gsZ0NBQWdDLGFBQW9DO0lBQ2xFLElBQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLFFBQVEsSUFBSSxVQUFVLENBQUM7SUFDdkQsTUFBTSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDO0FBQzFELENBQUM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCwyQkFBa0MsV0FBNkIsRUFDN0IsYUFBb0M7SUFDcEUsMEVBQTBFO0lBQzFFLHdFQUF3RTtJQUN4RSwwQkFBMEI7SUFDMUIsSUFBSSxDQUFDO1FBQ0gsWUFBWSxFQUFFLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDakUsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQU8sU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBRTtJQUFBLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDZixNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBTyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0FBQ0gsQ0FBQztBQVhlLHlCQUFpQixvQkFXaEMsQ0FBQTtBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILDJCQUFrQyxXQUE2QixFQUM3QixhQUFvQyxFQUNwQyxhQUFpQztJQUVqRSxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSztRQUMzRSxZQUFZLEVBQUUsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBUmUseUJBQWlCLG9CQVFoQyxDQUFBO0FBRUQ7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsMkJBQWtDLFdBQTZCLEVBQzdCLGFBQW9DO0lBRXBFLElBQUksQ0FBQztRQUNILElBQUksS0FBSyxHQUFHLFlBQVksRUFBRSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQzFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNYLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFxQixTQUFTLENBQUMsQ0FBQztRQUNsRCxDQUFDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQXFCLFdBQVcsQ0FBQyxVQUFVLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDNUYsQ0FBRTtJQUFBLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDZixNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBcUIsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQztBQUNILENBQUM7QUFaZSx5QkFBaUIsb0JBWWhDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQGZpbGUgd2ViL29mZmxpbmUudHNcbiAqIFJlbHV0aW9uIFNES1xuICpcbiAqIENyZWF0ZWQgYnkgVGhvbWFzIEJlY2ttYW5uIG9uIDMwLjA2LjIwMTZcbiAqIENvcHlyaWdodCAyMDE2IE0tV2F5IFNvbHV0aW9ucyBHbWJIXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQG1vZHVsZSB3ZWJcbiAqL1xuLyoqICovXG5cbmltcG9ydCAqIGFzIFEgZnJvbSAncSc7XG5cbmltcG9ydCAqIGFzIGluaXQgZnJvbSAnLi4vY29yZS9pbml0JztcbmltcG9ydCAqIGFzIGNpcGhlciBmcm9tICcuLi9jb3JlL2NpcGhlcic7XG5pbXBvcnQgKiBhcyBhdXRoIGZyb20gJy4uL3NlY3VyaXR5L2F1dGgnO1xuaW1wb3J0ICogYXMgaHR0cCBmcm9tICcuL2h0dHAnO1xuXG4vKipcbiAqIGxvY2FsU3RvcmFnZSBvZiBicm93c2VyIG9yIHZpYSByZXF1aXJlIG5vZGUtbG9jYWxzdG9yYWdlLlxuICpcbiAqIEBpbnRlcm5hbCBOb3QgcHVibGljIEFQSSwgZXhwb3J0ZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seSFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsU3RvcmFnZSgpIHtcbiAgcmV0dXJuIGdsb2JhbFsnbG9jYWxTdG9yYWdlJ10gfHxcbiAgICBwcm9jZXNzICYmICFwcm9jZXNzWydicm93c2VyJ10gJiYgKGdsb2JhbFsnbG9jYWxTdG9yYWdlJ10gPVxuICAgICAgbmV3IChyZXF1aXJlKCdub2RlLWxvY2Fsc3RvcmFnZScpLkxvY2FsU3RvcmFnZSkoJ2xvY2FsU3RvcmFnZScpKTsgLy8gcmVxdWlyZWQgdmVyc2lvblxufVxuXG4vKipcbiAqIGNvbXB1dGVzIGtleSBvZiBsb2dpbiByZXNwb25zZSBkYXRhIGZvciBzb21lIHNlcnZlci5cbiAqXG4gKiBAcGFyYW0gc2VydmVyT3B0aW9ucyBwcm92aWRpbmcgc2VydmVyIFVSTCBzbyB0aGF0IGtleXMgZG8gbm90IGNvbGxpZGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGtleSBzdWl0YWJsZSBmb3IgbG9jYWwgc3RvcmFnZS5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUxvY2FsU3RvcmFnZUtleShzZXJ2ZXJPcHRpb25zOiBpbml0LlNlcnZlclVybE9wdGlvbnMpIHtcbiAgY29uc3QgdW5pcXVlTW9kdWxlTmFtZSA9IG1vZHVsZS5maWxlbmFtZSB8fCBfX2ZpbGVuYW1lO1xuICByZXR1cm4gdW5pcXVlTW9kdWxlTmFtZSArICctJyArIHNlcnZlck9wdGlvbnMuc2VydmVyVXJsO1xufVxuXG4vKipcbiAqIGRlbGV0ZXMgc3RvcmVkIGxvZ2luIHJlc3BvbnNlIG9mIHNvbWUgc2VydmVyLlxuICpcbiAqIEBwYXJhbSBjcmVkZW50aWFscyBhbGxvd2luZyB0byBkaWZmZXJlbnRpYXRlIHdoZW4gbXVsdGlwbGUgbG9naW5zIGFyZSB1c2VkIHNpbXVsdGFuZW91c2x5LCBtYXlcbiAqICBiZSBudWxsIHRvIGZvcmdldCBqdXN0IGFueXRoaW5nLlxuICogQHBhcmFtIHNlcnZlck9wdGlvbnMgaWRlbnRpZnlpbmcgdGhlIHNlcnZlci5cbiAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IGluZGljYXRpbmcgc3VjY2VzcyBvciBmYWlsdXJlLlxuICpcbiAqIEBpbnRlcm5hbCBOb3QgcGFydCBvZiBwdWJsaWMgQVBJLCBmb3IgbGlicmFyeSB1c2Ugb25seS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyT2ZmbGluZUxvZ2luKGNyZWRlbnRpYWxzOiBhdXRoLkNyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlck9wdGlvbnM6IGluaXQuU2VydmVyVXJsT3B0aW9ucyk6IFEuUHJvbWlzZTx2b2lkPiB7XG4gIC8vIHNpbXVsdGFuZW91cyBsb2dpbnMgdXNpbmcgZGlmZmVyZW50IGNyZWRlbnRpYWxzIGlzIG5vdCByZWFsaXplZCBzbyBmYXIsXG4gIC8vIHNvIHRoYXQgdGhlIGNyZWRlbnRpYWxzIHBhcmFtZXRlciBpcyBpcnJlbGV2YW50LCBidXQgcHJvdmlkZWQgZm9yIHRoZVxuICAvLyBzYWtlIG9mIGNvbXBsZXRlbmVzcy4uLlxuICB0cnkge1xuICAgIGxvY2FsU3RvcmFnZSgpLnJlbW92ZUl0ZW0oY29tcHV0ZUxvY2FsU3RvcmFnZUtleShzZXJ2ZXJPcHRpb25zKSk7XG4gICAgcmV0dXJuIFEucmVzb2x2ZTx2b2lkPih1bmRlZmluZWQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBRLnJlamVjdDx2b2lkPihlcnJvcik7XG4gIH1cbn1cblxuLyoqXG4gKiB3cml0ZXMgcmVzcG9uc2UgZGF0YSB0byBwZXJzaXN0ZW50IHN0b3JhZ2UgZm9yIG9mZmxpbmUgbG9naW4gcHVycG9zZXMuXG4gKlxuICogQHBhcmFtIGNyZWRlbnRpYWxzIHJlcXVpcmVkIGZvciBlbmNyeXB0aW9uLlxuICogQHBhcmFtIHNlcnZlck9wdGlvbnMgaWRlbnRpZnlpbmcgdGhlIHNlcnZlci5cbiAqIEBwYXJhbSBsb2dpblJlc3BvbnNlIHBlcm1pdHRlZCB0byBkdXJhYmxlIHN0b3JhZ2UuXG4gKiBAcmV0dXJuIHtQcm9taXNlPGh0dHAuTG9naW5SZXNwb25zZT59IGluZGljYXRpbmcgc3VjY2VzcyBvciBmYWlsdXJlLlxuICpcbiAqIEBpbnRlcm5hbCBOb3QgcGFydCBvZiBwdWJsaWMgQVBJLCBmb3IgbGlicmFyeSB1c2Ugb25seS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlT2ZmbGluZUxvZ2luKGNyZWRlbnRpYWxzOiBhdXRoLkNyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlck9wdGlvbnM6IGluaXQuU2VydmVyVXJsT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dpblJlc3BvbnNlOiBodHRwLkxvZ2luUmVzcG9uc2UpOlxuUS5Qcm9taXNlPGh0dHAuTG9naW5SZXNwb25zZT4ge1xuICByZXR1cm4gY2lwaGVyLmVuY3J5cHRKc29uKGNyZWRlbnRpYWxzWydwYXNzd29yZCddLCBsb2dpblJlc3BvbnNlKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZSgpLnNldEl0ZW0oY29tcHV0ZUxvY2FsU3RvcmFnZUtleShzZXJ2ZXJPcHRpb25zKSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICByZXR1cm4gbG9naW5SZXNwb25zZTtcbiAgfSk7XG59XG5cbi8qKlxuICogcmVhZHMgcmVzcG9uc2UgZGF0YSBmcm9tIHBlcnNpc3RlbnQgc3RvcmFnZS5cbiAqXG4gKiBXaGVuIHRoZXJlIGlzIG5vIGRhdGEgaW4gcGVyc2l0ZW50IHN0b3JlLCB0aGUgb3BlcmF0aW9uIGRvZXMgTk9UIGZhaWwuIEluIHRoaXMgY2FzZSB0aGVcbiAqIHJlc3VsdGluZyBwcm9taXNlIHJlc29sdmVzIHRvIG5pbCBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSBjcmVkZW50aWFscyByZXF1aXJlZCBmb3IgZGVjcnlwdGlvbi5cbiAqIEBwYXJhbSBzZXJ2ZXJPcHRpb25zIGlkZW50aWZ5aW5nIHRoZSBzZXJ2ZXIuXG4gKiBAcmV0dXJuIHtQcm9taXNlPGh0dHAuTG9naW5SZXNwb25zZT59IHJlYWQgZnJvbSBzdG9yZSwgcmVzb2x2ZXMgdG8gbmlsIHdoZW4gdGhlcmUgaXMgbm8gZGF0YSxcbiAqICBnZXRzIHJlamVjdGVkIHdoZW4gZGVjcnlwdGlvbiBmYWlscy5cbiAqXG4gKiBAaW50ZXJuYWwgTm90IHBhcnQgb2YgcHVibGljIEFQSSwgZm9yIGxpYnJhcnkgdXNlIG9ubHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaE9mZmxpbmVMb2dpbihjcmVkZW50aWFsczogYXV0aC5DcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJPcHRpb25zOiBpbml0LlNlcnZlclVybE9wdGlvbnMpOlxuUS5Qcm9taXNlPGh0dHAuTG9naW5SZXNwb25zZT4ge1xuICB0cnkge1xuICAgIGxldCB2YWx1ZSA9IGxvY2FsU3RvcmFnZSgpLmdldEl0ZW0oY29tcHV0ZUxvY2FsU3RvcmFnZUtleShzZXJ2ZXJPcHRpb25zKSk7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuIFEucmVzb2x2ZTxodHRwLkxvZ2luUmVzcG9uc2U+KHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHJldHVybiBjaXBoZXIuZGVjcnlwdEpzb248aHR0cC5Mb2dpblJlc3BvbnNlPihjcmVkZW50aWFsc1sncGFzc3dvcmQnXSwgSlNPTi5wYXJzZSh2YWx1ZSkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBRLnJlamVjdDxodHRwLkxvZ2luUmVzcG9uc2U+KGVycm9yKTtcbiAgfVxufVxuIl19